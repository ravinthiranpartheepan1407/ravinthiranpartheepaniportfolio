<!DOCTYPE HTML>
<html>

<head>
    <meta charset="utf-8" />
    <title>Ravinthiran Partheepan - Piceditor</title>
    <link href="/images/icon.png" rel="icon">
    <link href="/images/icon.png" rel="apple-touch-icon">


    <script src="https://code.jquery.com/jquery-latest.js" crossorigin="anonymous"></script>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.3/css/bootstrap.min.css" integrity="sha384-Zug+QiDoJOrZ5t4lssLdxGhVrurbmBWopoEl+M6BdEfwnCJZtKxi1KgxUyJq13dy"
        crossorigin="anonymous">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.11.0/umd/popper.min.js" integrity="sha384-b/U6ypiBEHpOf/4+1nzFpr53nxSS+GLCkfwBdFNTxtclqqenISfwAzpKaMNFNmj4"
        crossorigin="anonymous"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta/js/bootstrap.min.js" integrity="sha384-h0AbiXch4ZDo7tp9hKZ4TsHbi047NrKGLO3SEJAg45jXxnGIfYzk4Si90RDIqNm1"
        crossorigin="anonymous"></script>


</head>
<style>
  container-fluid,
html,
body,
.full-screen {
  height: 100%;
}

.panel {
  width: 100%;
  background-color: #f5f5f5;
  border-bottom: 1px solid #545e81;
  position: fixed;
  height: 69px;
}

.controls {
  display: flex;
  justify-content: center;
}

.control-item {
  padding: 8px 0px;
  cursor: pointer;
}

li {
  list-style: none;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-box-pack: justify;
  -ms-flex-pack: justify;
  justify-content: space-between;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  text-align: center;
  margin: 5px 8px;
  width: 48px;
  height: 48px;
}

li:hover {
  color: #101f58;
}

li img {
  height: 20px;
  width: 20px;
  margin-bottom: 4px;
}

a {
  color: inherit;
}
a:hover {
  text-decoration: none;
  color: inherit;
}

.img-area {
  padding-top: 69px;
  min-height: 100%;
}

#default-drag-area {
  padding-top: 8%;
}

.invisible {
  display: none;
}

input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  -webkit-appearance: none;
  margin: 0;
}
</style>
<body>
    <audio id="audio">
        Your browser does not support the
        <code>audio</code> element.
    </audio>

    <header class="panel">
        <div class="controls">
            <div class="control-item">
                <div class="dropdown">
                    <div id="dropdownMenu2" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <li>
                            <img src="./assets/img/draw.svg" alt="cropButton">
                            <div class="text">DRAW</div>
                        </li>
                    </div>
                    <div class="dropdown-menu" aria-labelledby="dropdownMenu2">
                        <button class="dropdown-item" type="button" id="penDraw">Pen</button>
                        <button class="dropdown-item" type="button" id="lineDraw">Line</button>
                        <button class="dropdown-item" type="button" id="rectangleDraw">Rectangle</button>
                        <button class="dropdown-item" type="button" id="circleDraw">Circle</button>
                    </div>
                </div>
            </div>
            <div class="control-item" id="cropButton">
                <li>
                    <img src="./assets/img/crop-symbol.svg" alt="cropButton">
                    <div class="text">CROP</div>
                </li>
            </div>
            <div class="control-item">
                <div data-toggle="modal" data-target="#resolutionModal">
                    <li>
                        <img src="./assets/img/resize.svg" alt="cropButton">
                        <div class="text">RESIZE</div>
                    </li>
                </div>
            </div>
            <div class="control-item">
                <div class="dropdown">
                    <div id="dropdownMenu3" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <li>
                            <img src="./assets/img/filter.svg" alt="cropButton">
                            <div class="text">FILTER</div>
                        </li>
                    </div>
                    <div class="dropdown-menu" aria-labelledby="dropdownMenu3">
                        <button class="dropdown-item" type="button" id="grayscale">Grayscale</button>
                        <button class="dropdown-item" type="button" id="threshold">Threshold</button>
                        <button class="dropdown-item" type="button" id="sephia">Sephia</button>
                        <button class="dropdown-item" type="button" id="invert">Invert Colors</button>
                    </div>
                </div>
            </div>

            <div class="control-item" id="undoButton">
                <li>
                    <img src="./assets/img/undo.svg" alt="cropButton">
                    <div class="text">RESET</div>
                </li>
            </div>
            <div class="control-item">
                <a id="linkDownload" href="#" download="processedImage.png">
                    <li>
                        <img src="./assets/img/download.svg" alt="cropButton">
                        <div class="text">SAVE</div>
                    </li>
                </a>
            </div>
        </div>
    </header>



    <div class="img-area text-center">

        <div id="default-drag-area">
            <img src="./assets/img/49665-200.png" class="img-fluid" />
            <h5>Drag your picture here to start editing.</h5>
        </div>

        <img id="initial-image" class="invisible" />

        <canvas id="imageProcessed" class="invisible">
    </div>



    <div class="modal fade" id="resolutionModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Resolution</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div id="modifyResolution">
                        <div class="form-group">
                            <div class="custom-control custom-checkbox">
                                <input type="checkbox" class="custom-control-input" id="checkbox-img-ratio">
                                <label class="custom-control-label" for="checkbox-img-ratio">Keep the image ratio</label>
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="width-size" class="col-form-label">Width:</label>
                            <input type="number" class="form-control" id="width-size">
                        </div>
                        <div class="form-group">
                            <label for="height-size" class="col-form-label">Height:</label>
                            <input type="number" class="form-control" id="height-size">
                        </div>
                    </div>
                    <div id="uploadPictureError" class="invisible">
                        <h3>You need to add a picture first!</h3>
                        <h5>Use drag and drop.</h5>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="saveResolution">Save changes</button>
                </div>
            </div>
        </div>
    </div>
    <script type="text/javascript">
      $(function () {


    $('.img-area')
        .on('dragover',  (e)=> {
            e.preventDefault();
        })
        .on('drop', (e)=> {
            e.preventDefault();
            var files = e.originalEvent.dataTransfer.files;
            if (files.length > 0) {
                var reader = new FileReader();
                reader.onload =  (e)=> {

                    $("#initial-image")
                        .load( ()=> {

                            $("#default-drag-area").addClass("invisible");

                            $("#imageProcessed").removeClass("invisible");

                            drawInitialImage();
                        })
                        .attr("src", e.target.result);
                };
                reader.readAsDataURL(files[0]);
                play("./media/waterdrop.wav");
            }
        });


    $("#linkDownload").click((e) => {
        clearEventsDraw();

        if ($('#imageProcessed').hasClass("invisible")) {
            e.preventDefault();
        } else {
            var imageUrl = $("#imageProcessed")[0].toDataURL("image/png").replace("image/png", "image/octet-stream");
            $("#linkDownload").attr("href", imageUrl);
        }
    })


    $('#resolutionModal').on('show.bs.modal',  (e)=> {

        if ($('#imageProcessed').hasClass("invisible")) {

            $("#modifyResolution").addClass("invisible");
            $("#uploadPictureError").removeClass("invisible");
        } else {

            $("#uploadPictureError").addClass("invisible");
            $("#modifyResolution").removeClass("invisible");
            var canvas = $("#imageProcessed")[0];


            $("#width-size").val(canvas.width);
            $("#height-size").val(canvas.height);


            var ratio = canvas.width / canvas.height
            $("#width-size").keyup( (e) => {
                if ($("#checkbox-img-ratio").is(":checked")) {
                    $("#height-size").val($("#width-size")[0].value / ratio)
                }
            })
            $("#height-size").keyup( () => {
                if ($("#checkbox-img-ratio").is(":checked")) {
                    $("#width-size").val($("#height-size")[0].value * ratio)
                }
            })


            $("#saveResolution").click(() => {
                var context = canvas.getContext("2d");
                var image = new Image;
                image.src = canvas.toDataURL("image/png");
                canvas.width = $("#width-size").val();
                canvas.height = $("#height-size").val();
                image.onload =  ()=> {
                    context.drawImage(image, 0, 0, canvas.width, canvas.height);
                    play("./media/drawing.wav");
                };
                $('#resolutionModal').modal('hide');
            })
        }
        clearEventsDraw();
    })


    $("#undoButton").click(() => {
        clearEventsDraw();
        drawInitialImage();
        play("./media/drawing.wav");
    })


    $("#cropButton").click(() => {
        clearEventsDraw();

        var canvas = $("#imageProcessed")[0];
        var context = canvas.getContext("2d");
        var position = $("#imageProcessed").offset();

        var started = false;
        var image;


        var x = 0;
        var y = 0;

        var sx = 0;
        var sy = 0;

        var width = 500;
        var height = 700;

        $("#imageProcessed")
            .mousedown((event) => {
                started = true;
                sx = event.pageX;
                sy = event.pageY;
                x = sx - position.left;
                y = sy - position.top;
                image = new Image;
                image.src = canvas.toDataURL("image/png");
            })
            .mousemove((event)=>{
                if (started) {

                    var x1 = Math.min(event.pageX - position.left, x);
                    var y1 = Math.min(event.pageY - position.top, y);
                    width = Math.abs(event.pageX - position.left - x1);
                    height = Math.abs(event.pageY - position.top - y1);

                    redrawCurrentImage(image);

                    if (!width || !height) {
                        return;
                    }
                    context.strokeRect(x1-1, y1-1, width+2, height+2);
                }
            })
            .mouseup((event) => {
                started = false;
                width = event.pageX - sx;
                height = event.pageY - sy;

                var image = new Image;
                image.src = canvas.toDataURL("image/png");
                image.onload =  () =>{
                    context.clearRect(0, 0, canvas.width, canvas.height);
                    canvas.width = width;
                    canvas.height = height;
                    context.drawImage(image, x, y, width, height, 0, 0, width, height);
                    play("./media/drawing.wav");
                    $("#imageProcessed").unbind("mousedown");
                    $("#imageProcessed").unbind("mouseup");
                    $("#imageProcessed").unbind("mousemove");
                };
            });
    })


    $("#penDraw").click(() => {
        clearEventsDraw();

        var started = false;
        var canvas = $("#imageProcessed")[0];
        var context = canvas.getContext("2d");

        $("#imageProcessed")
            .mousedown((event) => {
                context.beginPath();
                context.moveTo(event.offsetX, event.offsetY);
                started = true;
            })
            .mousemove((event) => {
                if (started) {
                    context.lineTo(event.offsetX, event.offsetY);
                    context.stroke();
                }
            })
            .mouseup((event) => {
                if (started) {
                    started = false;
                }
            });
    })


    $("#lineDraw").click(() => {
        clearEventsDraw();

        var started = false;
        var canvas = $("#imageProcessed")[0];
        var context = canvas.getContext("2d");
        var position = $("#imageProcessed").offset();
        var image;
        var x = 0;
        var y = 0;


        $("#imageProcessed")
            .mousedown((event) => {
                x = event.pageX - position.left;
                y = event.pageY - position.top;
                started = true;
                image = new Image;
                image.src = canvas.toDataURL("image/png");
            })
            .mousemove((event) => {
                if (started) {
                    redrawCurrentImage(image);
                    context.beginPath();
                    context.moveTo(x, y);
                    context.lineTo(event.pageX - position.left, event.pageY - position.top);
                    context.stroke();
                    context.closePath();
                }
            })
            .mouseup((event) => {
                if (started) {
                    started = false;
                }
            });
    })


    $("#rectangleDraw").click(() => {
        clearEventsDraw();

        var started = false;
        var canvas = $("#imageProcessed")[0];
        var context = canvas.getContext("2d");
        var position = $("#imageProcessed").offset();
        var image;
        var x = 0;
        var y = 0;
        var width = 0;
        var height = 0;


        $("#imageProcessed")
            .mousedown((event) => {
                x = event.pageX - position.left;
                y = event.pageY - position.top;
                started = true;
                image = new Image;
                image.src = canvas.toDataURL("image/png");
            })
            .mousemove((event) => {
                if (started) {
                    x = Math.min(event.pageX - position.left, x);
                    y = Math.min(event.pageY - position.top, y);
                    width = Math.abs(event.pageX - position.left - x);
                    height = Math.abs(event.pageY - position.top - y);

                    redrawCurrentImage(image);

                    if (!width || !height) {
                        return;
                    }
                    context.strokeRect(x, y, width, height);
                }
            })
            .mouseup((event) => {
                if (started) {
                    started = false;
                }
            });
    })


    $("#circleDraw").click(() => {
        clearEventsDraw();

        var started = false;
        var canvas = $("#imageProcessed")[0];
        var context = canvas.getContext("2d");
        var position = $("#imageProcessed").offset();
        var image;
        var startX = 0;
        var startY = 0;


        $("#imageProcessed")
            .mousedown((event) => {
                startX = event.pageX - position.left;
                startY = event.pageY - position.top;
                started = true;
                image = new Image;
                image.src = canvas.toDataURL("image/png");
            })
            .mousemove((event) => {
                if (started) {
                    redrawCurrentImage(image);

                    var x = event.pageX - position.left;
                    var y = event.pageY - position.top;

                    context.beginPath();
                    context.moveTo(startX, startY + (y-startY)/2);
                    context.bezierCurveTo(startX, startY, x, startY, x, startY + (y-startY)/2);
                    context.bezierCurveTo(x, y, startX, y, startX, startY + (y-startY)/2);
                    context.closePath();
                    context.stroke();

                }
            })
            .mouseup((event) => {
                if (started) {
                    started = false;
                }
            });
    })



    $("#grayscale").click((event)=>{
        var canvas = $("#imageProcessed")[0];
        var context = canvas.getContext("2d");
        let imageData = context.getImageData(0, 0, context.canvas.width, context.canvas.height);
        let pixels = imageData.data;
        for (let i = 0; i < pixels.length; i += 4)
            pixels[i] = pixels[i + 1] = pixels[i + 2] = Math.round((pixels[i] + pixels[i + 1] + pixels[i + 2]) / 3);
        context.putImageData(imageData, 0, 0);
    })

    $("#threshold").click((event)=>{
        var canvas = $("#imageProcessed")[0];
        var context = canvas.getContext("2d");
        let imageData = context.getImageData(0, 0, context.canvas.width, context.canvas.height);
        let pixels = imageData.data;
        for (let i = 0; i < pixels.length; i += 4) {
            var r = pixels[i],
                g = pixels[i+1],
                b = pixels[i+2];
            var v = (0.2126*r + 0.7152*g + 0.0722*b >= 180) ? 255 : 0;
            pixels[i] = pixels[i+1] = pixels[i+2] = v
        }
        context.putImageData(imageData, 0, 0);
    })


    $("#sephia").click((event)=>{
        var canvas = $("#imageProcessed")[0];
        var context = canvas.getContext("2d");
        let imageData = context.getImageData(0, 0, context.canvas.width, context.canvas.height);
        let pixels = imageData.data;
		for(var i = 0; i < pixels.length; i+=4) {
			var r = pixels[i],
				g = pixels[i+1],
				b = pixels[i+2];
			pixels[i] = (r * .393) + (g *.769) + (b * .189)
			pixels[i+1] = (r * .349) + (g *.686) + (b * .168)
			pixels[i+2] = (r * .272) + (g *.534) + (b * .131)
		}
        context.putImageData(imageData, 0, 0);
    })

    $("#invert").click((event)=>{
        var canvas = $("#imageProcessed")[0];
        var context = canvas.getContext("2d");
        let imageData = context.getImageData(0, 0, context.canvas.width, context.canvas.height);
        let pixels = imageData.data;
		for(var i = 0; i < pixels.length; i+=4)
		{
			var r = pixels[i],
				g = pixels[i+1],
				b = pixels[i+2];
			pixels[i] = 255-r;
		    pixels[i+1] = 255-g;
			pixels[i+2] = 255-b;
		}
        context.putImageData(imageData, 0, 0);
    })

});

function drawInitialImage() {
    var canvas = $("#imageProcessed")[0];
    var context = canvas.getContext("2d");
    var image = document.getElementById("initial-image");
    canvas.width = image.width;
    canvas.height = image.height;
    context.drawImage(image, 0, 0, canvas.width, canvas.height);
}

function redrawCurrentImage(image) {
    var canvas = $("#imageProcessed")[0];
    var context = canvas.getContext("2d");
    canvas.width = image.width;
    canvas.height = image.height;
    context.drawImage(image, 0, 0, canvas.width, canvas.height);
}

function play(path) {
    var audio = $('#audio')[0];
    audio.src = path;
    audio.load();
    audio.play();
}

function clearEventsDraw() {
    $("#imageProcessed").unbind("mousedown");
    $("#imageProcessed").unbind("mouseup");
    $("#imageProcessed").unbind("mousemove");
}
    </script>
</body>

</html>
